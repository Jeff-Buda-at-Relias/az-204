## log in and switch to Relias Playground
az login
az account set --subscription "Enterprise Dev/Test"

#### Create env vars ####

export APP_NAME="budaSampleApp"
export LOCATION="eastus"
export RESOURCE_GROUP_NAME=$APP_NAME"RG"
export TEAM_NAME="Async Operators"
export MANAGER="Warren"
export PRIMARY_CONTACT="Jeff Buda"
export DATE_CREATED="2024-05-18"

## Storage name must be all lowercase
storageName=$APP_NAME"Storage" 
export STORAGE_ACCOUNT_NAME=${storageName,,}
echo $STORAGE_ACCOUNT_NAME

## App Config: table storage table name
export TABLE_STORAGE_TABLE_NAME="ItemTable"
echo $TABLE_STORAGE_TABLE_NAME

## App Config: queue storage queue name (must be all lowercase)
queueStorageQueueName="ItemQueue"
export QUEUE_STORAGE_QUEUE_NAME=${queueStorageQueueName,,}
echo $QUEUE_STORAGE_QUEUE_NAME

## App Config resource name
export APP_CONFIG_NAME=$APP_NAME"AppConfigStore"
echo $APP_CONFIG_NAME

## Redis Cache name
export REDIS_CACHE_NAME=$APP_NAME"RedisCache"
echo $REDIS_CACHE_NAME

## Event Grid topic name
export EVENT_GRID_TOPIC_NAME=$APP_NAME"ItemAddedTopic"
echo $EVENT_GRID_TOPIC_NAME

## Container Registry name (must be all lowercase)
containerRegistryName=$APP_NAME"ContainerRegistry"
export CONTAINER_REGISTRY_NAME=${containerRegistryName,,}
echo $CONTAINER_REGISTRY_NAME

#### Create resources ####

## Create a resource group
az group create --name "$RESOURCE_GROUP_NAME" --location "$LOCATION" --tags "Team Name"="$TEAM_NAME" "Manager"="$MANAGER" "Primary Contact"="$PRIMARY_CONTACT" "Date Created"="$DATE_CREATED"

## Create a storage account
az storage account create --name $STORAGE_ACCOUNT_NAME --resource-group $RESOURCE_GROUP_NAME --location $LOCATION --sku Standard_LRS

## Create app config store
az appconfig create --name $APP_CONFIG_NAME --resource-group $RESOURCE_GROUP_NAME --location $LOCATION --sku Standard

## List all app config connection string which is needed in the secrets.json file
az appconfig credential list --name $APP_CONFIG_NAME --query "[?name=='Primary Read Only'].connectionString" --output tsv

## Get App Config store URL
export APP_CONFIG_URL=$(az appconfig show --name $APP_CONFIG_NAME --query endpoint --output tsv)
echo $APP_CONFIG_URL

## Get storage account connection string
export STORAGE_CONNECTION_STRING=$(az storage account show-connection-string --name $STORAGE_ACCOUNT_NAME --resource-group $RESOURCE_GROUP_NAME --query connectionString --output tsv)
echo $STORAGE_CONNECTION_STRING

#### Table Storage ####

## Create a table in the storage account
az storage table create --name $TABLE_STORAGE_TABLE_NAME --connection-string $STORAGE_CONNECTION_STRING

## Get and store the table storage URL
export TABLE_STORAGE_URL=$(az storage account show --name $STORAGE_ACCOUNT_NAME --resource-group $RESOURCE_GROUP_NAME --query primaryEndpoints.table --output tsv)
echo $TABLE_STORAGE_URL

## Set the table storage URL in the app config store
az appconfig kv set --name $APP_CONFIG_NAME --key "TableStorageUrl" --value $TABLE_STORAGE_URL --yes

## Set the table storage table name in the app config store
az appconfig kv set --name $APP_CONFIG_NAME --key "TableStorageTableName" --value $TABLE_STORAGE_TABLE_NAME --yes

#### Storage Queue ####

## Create a queue in the storage account
az storage queue create --name $QUEUE_STORAGE_QUEUE_NAME --connection-string $STORAGE_CONNECTION_STRING

## Get and store the queue storage URL
export QUEUE_STORAGE_URL=$(az storage account show --name $STORAGE_ACCOUNT_NAME --resource-group $RESOURCE_GROUP_NAME --query primaryEndpoints.queue --output tsv)
echo $QUEUE_STORAGE_URL

## Set the queue storage URL in the app config store
az appconfig kv set --name $APP_CONFIG_NAME --key "QueueStorageUrl" --value $QUEUE_STORAGE_URL --yes

## Set the queue storage queue name in the app config store
az appconfig kv set --name $APP_CONFIG_NAME --key "QueueStorageQueueName" --value $QUEUE_STORAGE_QUEUE_NAME --yes


#### Redis Cache ####

## Create a Redis cache
az redis create --name $REDIS_CACHE_NAME --resource-group $RESOURCE_GROUP_NAME --location $LOCATION --sku Basic --vm-size c0


#### Event Grid ####

## Create an Event Grid topic
az eventgrid topic create --name $EVENT_GRID_TOPIC_NAME --location $LOCATION --resource-group $RESOURCE_GROUP_NAME

## Get and store the Event Grid topic key
export EVENT_GRID_TOPIC_KEY=$(az eventgrid topic key list --name $EVENT_GRID_TOPIC_NAME --resource-group $RESOURCE_GROUP_NAME --query key1 --output tsv)
echo $EVENT_GRID_TOPIC_KEY

## Get the Event Grid topic endpoint 
az eventgrid topic show --name $EVENT_GRID_TOPIC_NAME --resource-group $RESOURCE_GROUP_NAME --query endpoint --output tsv


#### List the resources created ####

## List the storage account contents ##
az storage table list --account-name $STORAGE_ACCOUNT_NAME --output table
az storage queue list --account-name $STORAGE_ACCOUNT_NAME --output table

## List all the keys in the app config store
az appconfig kv list --name $APP_CONFIG_NAME --output table

## List the resource group contents ##
az resource list --resource-group $RESOURCE_GROUP_NAME --output table

## List the connection strings for local development secrets.json file
az storage account show-connection-string --name $STORAGE_ACCOUNT_NAME --query connectionString --output tsv

## List the primary key for the Redis cache
az redis show --name $REDIS_CACHE_NAME --resource-group $RESOURCE_GROUP_NAME --query [hostName,sslPort] --output tsv
az redis list-keys --name $REDIS_CACHE_NAME --resource-group $RESOURCE_GROUP_NAME --query primaryKey --output tsv


#### Container Registry ####

## Create a container registry
az acr create --name $CONTAINER_REGISTRY_NAME --resource-group $RESOURCE_GROUP_NAME --sku Basic --admin-enabled true

#### Build and push the image to the container registry ####

## 1) Log in to the container registry
az acr login --name $CONTAINER_REGISTRY_NAME --expose-token

## 2) Get the ACR login server name
export ACR_REPOSITORY_LOGIN_SERVER=$(az acr show --name $CONTAINER_REGISTRY_NAME --query loginServer --output tsv)
echo $ACR_REPOSITORY_LOGIN_SERVER

## 3) Create and store the image name (must be all lowercase)
imageName=$APP_NAME 
export DOCKER_IMAGE_NAME=${imageName,,}
echo $DOCKER_IMAGE_NAME

## 4) Build and push the image to the container registry
az acr build --registry $CONTAINER_REGISTRY_NAME --image $ACR_REPOSITORY_LOGIN_SERVER/$DOCKER_IMAGE_NAME .

## 5) List the images in the container registry
az acr repository list --name $CONTAINER_REGISTRY_NAME --output table
